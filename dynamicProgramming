//CLIMB STAIRS

 public static void main(String[] args) {
        // write your code here
        
        Scanner scn= new Scanner(System.in);
        int n= scn.nextInt();
        
        int arr[]= new int[n];
        for(int i=0;i<n;i++)
        arr[i]=scn.nextInt();
        
        
        
        int dp[]= new int[n+1];
        
        dp[n]=1;
        
        for(int i=n-1;i>=0;i--)
        {
           for(int j=1;j<=arr[i] && i+j<dp.length;j++)
           {
               dp[i]+=dp[i+j];
           }
        }
        
        System.out.println(dp[0]);
    }
	
	
  //CLIMB STAIRS WITH MIN MOVES
  
   public static void main(String[] args) throws Exception {
       
         Scanner scn= new Scanner(System.in);
        int n= scn.nextInt();
        
        int arr[]= new int[n];
        for(int i=0;i<n;i++)
        arr[i]=scn.nextInt();
        
        Integer dp[]= new Integer[n+1];
        dp[n]=0;
        
        for(int i=n-1;i>=0;i--)
        {   
            
            if(arr[i]>0){
                
                int min=Integer.MAX_VALUE;
                
                for(int j=1;j<=arr[i] && i+j<dp.length;j++)
                {
                    if(dp[i+j]!=null)
                    min= Math.min(dp[i+j],min);
                }
                
                if(min!=Integer.MAX_VALUE)
                dp[i]=min+1;
            }
            
        }
        
        System.out.println(dp[0]);
    }
	
	//Min Cost In Maze Traversal
	
	  public int minPathSum(int[][] grid) {
        
        if(grid.length==0) return 0;
        
        int r= grid.length;
        int c= grid[0].length;
        
        int dp[][]= new int[r][c];
        
        for(int i=r-1;i>=0;i--){
            
            for(int j=c-1;j>=0;j--){
                
                dp[i][j]=grid[i][j];
                
                if(i+1<r && j+1>=c)
                    dp[i][j]+=dp[i+1][j];
                else if(j+1<c && i+1>=r)
                    dp[i][j]+=dp[i][j+1];
                else if(i+1<r && j+1<c)
                    dp[i][j]+= Math.min(dp[i+1][j],dp[i][j+1]);
                
                    
                
            }
        }
        
        return dp[0][0];
    }
	
	//Goldmine
    **one thing to keep in mind is when two loops will run, always write column first and then rows after that in this question**
	
	  public static void main(String[] args) throws Exception {
        
        Scanner s = new Scanner(System.in);
        int m= s.nextInt();
        int n= s.nextInt();
        
        int arr[][]= new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                arr[i][j]=s.nextInt();
            }
        }
        
        int dp[][]= new int[m][n];
        
        int ans=Integer.MIN_VALUE;
        
        for(int j=0;j<n;j++){
            for(int i=0;i<m;i++){
                
                if(j==0){
                    dp[i][j]=arr[i][j];
                }
                else if(j==n-1){
                    dp[i][j]=arr[i][j]+ Math.max((i-1>=0?dp[i-1][j-1]:0),Math.max(dp[i][j-1],(i+1<m?dp[i+1][j-1]:0)));
                    ans=Math.max(ans,dp[i][j]);
                }
                else{
                     dp[i][j]=arr[i][j]+ Math.max((i-1>=0?dp[i-1][j-1]:0),Math.max(dp[i][j-1],(i+1<m?dp[i+1][j-1]:0)));
                }
            }
        }
        
        System.out.println(ans);
    }

    # NEXT FIVE QUESTIONS ARE OF SAME TYPE #
    
    //TARGET SUM SUBSET
    

